Step 3 - Calculate Big O Worst Case Run Time Analysis

Task0: 
1. Print first record and last record of texts: 
    a. first record lookup is constant time = O(1) 
    b. last record lookup is constant time = O(1) 
    c. result: O(1) * 2 = O(1)


Task1:
1. Print count of unique phone numbers in calls list: 
    a. assign combined set variable = O(1)
    b. for loop using zip() on two separate lists N and M = O(N*M) *cite:1
    c. assign group variable = O(1)
    d. for loop over group list = O(N)
    e. add item each iteration to combined set = O(1)
    f. result: O(1) + O(N*M) + O(1) + O(N) + O(1) = O(N*M)


Task2:
1. Print max duration on phone: 
    a. assign dictionary variable = O(1)
    b. for loop over call list = O(N)
    c. assign three variables = O(1) * 3
    d. if statement over dict keys = O(N) 
    e. if statement over dict keys = O(N) 
    f. assign phone duration dictionary variable = O(1)
    f. for loop iterate over phone duration = O(N)
    g. sum and map iteration = O(1) + O(M) 
    h. assign max time variable from dictionary = O(1)
    i. result: O(1) * 7 + O(N) * 4 + O(M) = O(max(N,M))  *cite:3


Task3:
1. Print unique area codes:
    a. if statement = O(N) 
    b. assign two list variables = O(1) * 2
    c. for loop iterate over call list = O(N) 
    d. assign four list variables = O(1) * 4
    e. if statement = O(N) 
    f. add to receiver list = O(1)
    g. for loop iterate over receiver list = O(N)
    h. if statement = O(N)
    i. add to code list = O(1)
    j. sort list = O(log N)   *cite:2
    k. result: O(N) * 5 + O(1) * 8 = O(log N)

2.  Print percentage of calls: 
    a. assign two lists variables = O(1) * 2
    b. for loop iterate over call list = O(N)
    c. assign four list variables = O(1) * 4
    d. if statement = O(N) 
    e. add to fixed list = O(N)
    f. if statement = O(N)
    g. add to from fixed list = O(N)
    h. assign two variables for division and round = O(1) * 2
    d. division and round statement = O(1) * 2
    e. result = O(1) * 10 + O(N) * 5 = O(N) 

Task4:
1. Print telemarketers list:
    a. if statement = O(N)
    b. assign telemarketers set variable = O(1)
    c. for loop over calls list = O(N)
    d. assign four call list variables = O(1) * 4
    e. if statement = O(N) 
    f. add to telemarketers list = O(1)
    g. for loop over texts list = O(M)
    h. assign two list variables = O(1) * 2
    i. if statement = O(M) 
    j. add to list = O(1) 
    k. assign result variable = O(1)
    l. sort telemarketers list = O(log N)  *cite:2
    h. result: O(N) * 4 + O(1) * 10 + O(M) * 2 = O(max(N, M) log N)  *cite:3


Citations: 
1. https://stackoverflow.com/questions/36877715/what-is-the-time-complexity-of-zip-in-python
here the article is stating the time complexity of using a built in zip() function in Python.
2. https://stackoverflow.com/questions/42767642/runtime-of-sorted-on-an-already-sorted-list
here it is noted the using Python's sorted() function is a O(N) operation opposed to other typical sorting algorithms that use a O(log N). For the purposes of learning Big O I've included O(log N) but,
technically the function sorted() in Python is an O(N).
3. the max() notation is simply saying the worst case would be whatever data set is larger would be the cause of the longest runtime. You are taking the max() of either N or M dataset.